openapi: '1.0.0'
info:
  title: AuthService
  description: A service to manage Users
  contact:
    name: API Support
    email: aymeric.beudaert@gmail.com
  version: 1.0.1
paths:
  /user:
    delete:
      summary: Delete a user in the service
      parameters:
      - name: userId
        in: query
        description: userId of the user to delete
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User well deleted.
        '401':
          description: User not authorized to create user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
      security:
      - admin:
        - write:user
        - read:user
    put:
      summary: Update a user in the service
      parameters:
      - name: userId
        in: query
        description: userId of the user to modify
        required: true
        schema:
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                info:
                  description: Everything you want
                  type: object
                permissions:
                  description: Permissions for the user
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: The user updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: User not authorized to update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
      security:
      - admin:
        - write:user
        - read:user
    post:
      summary: Create a new user in the service
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                provider:
                  description: 'Name of the provider(ex: github or manual)'
                  type: string
                providerReq:
                  description: Information needed to register the user by the provider
                  type: object
                info:
                  description: Everything you want to add to your user
                  type: object
                permissions:
                  description: Permissions for the user
                  type: array
                  items:
                    type: string
              required:
                - provider
                - providerReq
      responses:
        '201':
          description: JWT token of the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        '303':
          description: User already created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
        '400':
          description: Information for the provider uncorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
        '401':
          description: User not authorized to create user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralError'
      security:
      - admin:
        - write:user
        - read:user
  /validateUser:
    get:
      description: Validate user
      parameters:
      - name: token
        in: query
        description: token to validate
        required: true
        schema:
          type: string
      responses:
        '200':
          description: return users infos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      security:
      - admin:
        - write:user
        - read:user

components:
  schemas:
    user:
      type: object
      properties:
        userId:
          type: string
        info:
          description: 'Everything you posted in the user + some data in function of the provider(Ex: email)'
          type: object
    token:
      type: object
      properties:
        token:
          type: string
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  securitySchemes:
    admin:
      type: http
      scheme: bearer
      bearerFormat: JWT
